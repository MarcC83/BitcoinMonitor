@page "/"

@using BitcoinMonitor.Data
@using BitcoinMonitor.Domain.Models
@using BitcoinMonitor.Domain.Models.Configuration
@using BitcoinMonitor.Interfaces.Hubs
@using Blazorise.Charts
@using Microsoft.AspNetCore.SignalR.Client
@inject ExchangeRateService ExchangeRateService
@inject NavigationManager NavigationManager
@inject ILogger<Index> logger
@inject ExchangeRateProviderConfiguration exchangeRateConfiguration  

<PageTitle>Bitcoin Monitor live tracker</PageTitle>

<h1>Welcome!</h1>

<h2>Please read me!</h2>
<p>Welcome to Bitcoin monitor, in times where bitcoin price changes every @exchangeRateConfiguration.SamplingInterval.TotalSeconds.ToString() seconds it is important to keep track of it in a live view.</p>

<p>The application retreives BTC to EUR price from <a href="https://api.coinbase.com">Coinbase public API</a>. A noise is added to the reteived value, 
    noise value can be at maximum @exchangeRateConfiguration.NoiseLevel% of the retreived value</p>
<p>Values retrieve from the coin base api are stored in a in memory database when running on localhost or MsSql databbase for the Azure version using EF core</p>
<div class="container">
  <div class="row text-center">
    <div class="col-3">
      @currentPrice
    </div>
    <div class="col-3">
      <button type="button" @onclick="() => SetTime(TimeSpan.FromHours(1))" class="btn btn-primary">1 Hour</button>
    </div>
    <div class="col-3">
      <button type="button" @onclick="() => SetTime(TimeSpan.FromDays(1))" class="btn btn-primary">1 Day</button>
    </div>
    <div class="col-3">
      <button type="button" @onclick="() => SetTime(TimeSpan.FromDays(5))" class="btn btn-primary">5 Days</button>
    </div>
  </div>
</div>
<LineChart @ref="lineChart" TItem="double" />
@code{
    private HubConnection? hubConnection;
    LineChart<double>? lineChart;
    static private List<ExchangeRate>? exchangeRates;
    static private bool isGraphDrawn = false;
    string currentPrice = "Loading";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/exchangerateupdatehub"))
            .Build();

        hubConnection.On<ExchangeRate>(nameof(IExchangeRateHub.CurrentExchangeRate), async (newRate) =>
        {
            logger.LogDebug("Received new rate");
            await AddRate(newRate);
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            exchangeRates = new (await ExchangeRateService.GetExchangeRatesAsync(DateTime.UtcNow - maxTimeForData));
            SetCurrentPrice(exchangeRates.Last().Price);
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (lineChart is not null)
        {
            await lineChart.Clear();
            Labels = GetLabels();
            await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
            isGraphDrawn = true;
        }
    }

    IEnumerable<ExchangeRate> GetExchangeRatesFilterByTime()
    {
        if(exchangeRates is not null)
            return exchangeRates.Where(r => r.Time > DateTime.UtcNow - maxTimeForData);
        return new ExchangeRate[0];
    }

    async Task AddRate(ExchangeRate newRate)
    {
        //exchangeRates is assigned when the graph is render the first time, here graph updates are 
        //skept until the graph is create the first time
        if (exchangeRates is not null && isGraphDrawn)
        {
            if (lineChart is not null)
            {
                await lineChart.AddLabels(newRate.Time.ToLocalTime().ToString());
                await lineChart.AddData(0,(double)newRate.Price);
                await lineChart.Update();
            }
            exchangeRates.Add(newRate);
            SetCurrentPrice(newRate.Price);
        }
    }

    void SetCurrentPrice(double price)
    {
        currentPrice = $"Current price: {price:0.##} €";
        StateHasChanged();
    }


    string[] GetLabels()
    {
        if(exchangeRates is not null)
            return GetExchangeRatesFilterByTime()
                            .Select(r => r.Time)
                            .ToList().ConvertAll(t => t.ToLocalTime().ToString()).ToArray();

        return new string[0];
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        if (exchangeRates is not null && exchangeRates.Count > 0)
        {
            var exchangeRateToDisplay = GetExchangeRatesFilterByTime();
            var firstValue = exchangeRateToDisplay.First();
            return new LineChartDataset<double>
            {
                Label = $"{firstValue.BaseCurrency}-{firstValue.TargetCurrency} price",
                Data = exchangeRateToDisplay.Select(r => r.Price).ToList().ConvertAll(d => (double)d),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = false,
                PointRadius = 2,
                BorderDash = new List<int> { }
            }; 
        }

        logger.LogError("{VariableName} was null", exchangeRates);
        return new LineChartDataset<double>();
    }

    TimeSpan maxTimeForData = TimeSpan.FromDays(5);
    async void SetTime(TimeSpan timeForData)
    {
        maxTimeForData = timeForData;
        await HandleRedraw();
    }

    string[] Labels = new string[0];
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

}
